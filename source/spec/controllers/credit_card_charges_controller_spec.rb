# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CreditCardChargesController, type: :controller do
  let(:customer) { FactoryBot.create(:customer) }

  let(:valid_attributes) {
    {
      amount: 3500,
      currency: CreditCardCharge::DEFAULT_CURRENCY,
      paid: true,
      refunded: false,
      customer_id: customer.id
    }
  }

  let(:invalid_attributes) {
    {
      amount: 3500,
      currency: '',
      paid: true,
      refunded: false
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CreditCardChargesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    let(:cc_successful_charges) { 5.times.map { FactoryBot.create(:credit_card_charge, :successful) } }
    let(:cc_failed_charges) { 5.times.map { FactoryBot.create(:credit_card_charge, :failed) } }
    let(:cc_disputed_charges) { 5.times.map { FactoryBot.create(:credit_card_charge, :disputed) } }
    let(:failed_disputed_charge) { FactoryBot.create(:credit_card_charge, :disputed) }

    it 'returns a success response' do
      CreditCardCharge.create! valid_attributes
      get :index, {}, valid_session
      expect(response).to be_successful
    end

    it 'assigns @cc_successful_charges' do
      get :index, {}, valid_session
      expect(assigns(:cc_successful_charges)).to eq(cc_successful_charges)
    end

    it 'assigns @cc_failed_charges' do
      get :index, {}, valid_session
      expect(assigns(:cc_failed_charges)).to eq(cc_failed_charges)
    end

    it 'assigns @cc_disputed_charges' do
      failed_disputed_charge.update!(paid: false)
      get :index, {}, valid_session
      expect(assigns(:cc_disputed_charges)).to eq([failed_disputed_charge] + cc_disputed_charges)
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      credit_card_charge = CreditCardCharge.create! valid_attributes
      get :show, {id: credit_card_charge.to_param}, valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, {}, valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      credit_card_charge = CreditCardCharge.create! valid_attributes
      get :edit, {id: credit_card_charge.to_param}, valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new CreditCardCharge' do
        expect {
          post :create, {credit_card_charge: valid_attributes}, valid_session
        }.to change(CreditCardCharge, :count).by(1)
      end

      it 'redirects to the created credit_card_charge' do
        post :create, {credit_card_charge: valid_attributes}, valid_session
        expect(response).to redirect_to(CreditCardCharge.last)
      end
    end

    context 'with invalid params' do
      it 'returns a success response (i.e. to display the \'new\' template)' do
        post :create, {credit_card_charge: invalid_attributes}, valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        {
          amount: 4500,
          currency: CreditCardCharge::DEFAULT_CURRENCY
        }
      }

      it 'updates the requested credit_card_charge' do
        credit_card_charge = CreditCardCharge.create! valid_attributes
        put :update, {id: credit_card_charge.to_param, credit_card_charge: new_attributes}, valid_session
        credit_card_charge.reload
        expect(credit_card_charge.amount).to eq(4500)
      end

      it 'redirects to the credit_card_charge' do
        credit_card_charge = CreditCardCharge.create! valid_attributes
        put :update, {id: credit_card_charge.to_param, credit_card_charge: valid_attributes}, valid_session
        expect(response).to redirect_to(credit_card_charge)
      end
    end

    context 'with invalid params' do
      it 'returns a success response (i.e. to display the \'edit\' template)' do
        credit_card_charge = CreditCardCharge.create! valid_attributes
        put :update, {id: credit_card_charge.to_param, credit_card_charge: invalid_attributes}, valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested credit_card_charge' do
      credit_card_charge = CreditCardCharge.create! valid_attributes
      expect {
        delete :destroy, {id: credit_card_charge.to_param}, valid_session
      }.to change(CreditCardCharge, :count).by(-1)
    end

    it 'redirects to the credit_card_charges list' do
      credit_card_charge = CreditCardCharge.create! valid_attributes
      delete :destroy, {id: credit_card_charge.to_param}, valid_session
      expect(response).to redirect_to(credit_card_charges_url)
    end
  end
end
